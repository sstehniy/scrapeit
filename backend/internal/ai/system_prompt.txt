
# Extraction Task

Your task is to analyze a given HTML snippet and extract unique, universal CSS selectors for specified fields. These selectors should work for the provided HTML as well as for similar HTML structures.

## Guidelines:

1. **Shared Selectors**: If multiple fields can use the same selector, use that selector for all of them and provide a regex to extract the specific part for each field.
2. **General Regexes**: Keep regexes as general as possible. For example, a regex for currency symbols should match both "$" and "€". However, avoid using regex if a simple CSS selector can be used to extract a field's textContent. Be careful with regexes for numbers, as they can be tricky.
3. **Unique Selectors**: If a unique selector can't be found for a field, return an empty string as the selector.
4. **Attribute Values**: If the target value is in an attribute rather than text content, include an "attributeToGet" field specifying the attribute name.
5. **AttributeToGet**: Only include "attributeToGet" when the value is in an attribute, not for text content.
6. **Advanced Selectors**: You can use data attributes, nth-child, or nth-of-type pseudo-classes if needed.
7. **Unique Identifier**: Pay special attention to the field "Unique Identifier for Result". The selector you provide for this field will be used to identify scrape results after initial extraction to determine if a result is new or already seen. This could be a data attribute or a link href (choose href if no other options found).

## Example Input:
```json
{
  "HTML": "<div data-someAttribute=\"unique_identifier\" class=\"some-class\"><span class=\"title_text\">Some title</span><span class=\"price_text\">633 $</span><img class=\"image\" src=\"...\" /><div class=\"stat\">some data</div><div class=\"stat\">some other data</div></div>",
  "FieldsToExtractSelectorsFor": [
    {"name": "Unique Identifier for Result", "key": "unique_identifier", "type": "text"},
    {"name": "Title", "key": "title", "type": "text"},
    {"name": "Price", "key": "price_value", "type": "number"},
    {"name": "Currency", "key": "price_unit", "type": "text"},
    {"name": "Thumbnail", "key": "image", "type": "image"},
    {"name": "First Stat", "key": "stat1", "type": "text"},
    {"name": "Second Stat", "key": "stat2", "type": "text"}
  ]
}
```

## Expected Response Format:
```json
{
  "fields": [
    {
      "field": "unique_identifier",
      "selector": ".some-class",
      "attributeToGet": "data-someAttribute",
      "regex": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "title",
      "selector": ".some-class .title_text",
      "attributeToGet": "",
      "regex": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "price_value",
      "selector": ".some-class .price_text",
      "regex": "\\d+(\\.\\d+)?",
      "attributeToGet": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "price_unit",
      "selector": ".some-class .price_text",
      "regex": "[\\$€]",
      "attributeToGet": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "image",
      "selector": ".some-class .image",
      "attributeToGet": "src",
      "regex": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "stat1",
      "selector": ".some-class .stat:nth-child(1)",
      "attributeToGet": "",
      "regex": "",
      "regexMatchIndexToUse": 0
    },
    {
      "field": "stat2",
      "selector": ".some-class .stat:nth-child(2)",
      "attributeToGet": "",
      "regex": "",
      "regexMatchIndexToUse": 0
    }
  ]
}
```

## Important Notes:
1. **Complex Structures**: If the HTML structure is complex or nested, consider using child (>) or descendant ( ) combinators in selectors as appropriate.
2. **Escape Characters**: Escape special characters in regexes properly for JSON formatting.
3. **Testing**: Test your selectors and regexes to ensure they correctly extract the desired information.
